---
title: "Optic Flow & Postural Control Study - Analysis Pipeline"
author: "Annabel Wing-Yan Fan"
date: "27/06/2020"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```
## H1
Note: Make sure excel file is completely filled out.

Please also change the column name of Roll Vel($\infty$/s)] to Roll Vel(Inf/s)] in the Rod and Disc Excel file. 

```{r load libraries and functions, include= FALSE}
library(tidyverse)
library(ggplot2)
library(car)
library(lme4) # Excellent mixed/multilevel modelling package
library(lmerTest) # Returns df and p-values using a Satterthwaite estimation to obtain the df
library(emmeans) # Gives estimated marginal means and SEs for plotting
library(e1071) # Needed to check assumptions
library(lattice)
library(patchwork)
library(RColorBrewer)

# found this on stack overflow from user: janusvm 
excel_to_csv <- function(path, out_dir = NULL) {
  if (is.null(out_dir)) out_dir <- dirname(path)
  sheets <- readxl::excel_sheets(path)
  filenames <- file.path(out_dir, paste0(sheets, ".csv"))
  dats <- lapply(sheets, readxl::read_excel, path = path)
  lapply(seq_along(dats), function(i) readr::write_csv(dats[[i]], filenames[i]))
  invisible()
}

# # Extract postural sheets from excel file 
# out_dir = "./data/analysis_data/extracted_postural_data"
# excel_to_csv("./data/analysis_data/PosturalSummary_June15.xlsx", out_dir)
# 
# # Extract rod and disc sheets from excel file 
# out_dir = "./data/analysis_data/extracted_rod_and_disc"
# excel_to_csv("./data/analysis_data/Rod and DiscSummary.xlsx", out_dir)
#
# # Extract vection data from excel file
# out_dir = "./data/analysis_data/extracted_vection_data"
# excel_to_csv("./data/analysis_data/Vection Summary_July16.xlsx", out_dir)

# FUNCTIONS
semipartial_R2 = function(x) {
  require(lmerTest)
  x %>%
    anova(type = 3, ddf="Kenward-Roger") %>%
    as_tibble %>%
    mutate(R2 = round(((NumDF / DenDF) * `F value` )/(1 + (NumDF / DenDF) * `F value` ), 3)) %>%
    select(R2) %>%
    bind_cols(x %>% anova(type = 3, ddf="Kenward-Roger") %>% row.names %>% as_tibble %>% rename(effect = value)) %>%
    return
}

calculate_icc_lmer = function(x) { # x is the MLM model object for your baseline model, created by lmer
  random_effects = data.frame(VarCorr(x))
  intercept_variance  = random_effects[random_effects$var1 == "(Intercept)", 'vcov'][1]
  residual_variance  = random_effects[random_effects$grp == "Residual", 'vcov']
  icc  = intercept_variance / (residual_variance + intercept_variance)
  return(icc)
}
```

```{r load data, include= FALSE}

# load postural data
no.motion_raw.data = read_csv("./data/analysis_data/extracted_postural_data/No Motion.csv")
trials_raw.data = read_csv("./data/analysis_data/extracted_postural_data/Trials.csv")

# wrangle postural data into the same dataset -----
no.motion_data <- no.motion_raw.data %>% 
  rename(Participant = Subject) %>% 
  mutate(Set = rep(c(0,2,4),length(unique(no.motion_raw.data$Subject))),# code set to be even for no motion trials
         Trial = 1, 
         Motion_speed = 0,
         Speed_rounded = 0)

trials_data <- trials_raw.data %>% 
  dplyr::select(-c(`Desired time included before/after each motion (s)`, `Time included before motion (s)`, `Time included after motion (s)` )) %>% 
  rename(Speed_rounded = Speed_Rounded, 
         Motion_speed = `Motion speed`)


trials_data <- trials_data %>% 
   mutate(Set = rep(c(1,3),(length(unique(trials_data$Participant))*150))) # re-code set to be odd for motion trials

# Join datasets
posture_data <- full_join(no.motion_data, trials_data) %>% 
  relocate(Participant, Set, Block, Trial, Motion_speed, Speed_rounded) %>% 
  mutate(Participant = factor(Participant),
         Set = factor(Set), 
         Block = factor(Block),
         Trial = factor(Trial))

# load rod and disc data
rodDisc_raw.data = read_csv("./data/analysis_data/extracted_rod_and_disc/Sheet1.csv")

# rename variables 
rodDisc_data <- rodDisc_raw.data %>% 
  rename(Block = `Block Number`,
         Trial = `Trial Number`,
         Velocity = `[Roll Vel(Inf/s)]`,
         StartPos = `[Rod Start Posn(deg)]`,
         RespPos = `[Rod Set Posn.(deg)]`)

# calculate tilt variable ----
rodDisc_data$diff.0 <- abs(0 - abs(rodDisc_data$RespPos))
rodDisc_data$diff.180 <- abs(180 - abs(rodDisc_data$RespPos))


rodDisc_data$tilt = rodDisc_data$diff.0 
  
# this takes the smaller of the angle difference to 0 or 180
rodDisc_data$tilt[rodDisc_data$tilt > rodDisc_data$diff.180] = rodDisc_data$diff.180[rodDisc_data$tilt > rodDisc_data$diff.180];

# calculate mean tilt for each participant 
mean_tilt <- rodDisc_data %>% group_by(Participant) %>% 
  summarise(tilt_mean = mean(tilt))

# add to posture_data
posture_data <- merge(posture_data, mean_tilt)

# Grand-mean centre our continous tilt variable (categorical variables are effect/dummy coded)
posture_data <- posture_data %>% 
  mutate(tilt_mean = tilt_mean - mean(tilt_mean, na.rm = TRUE))
  

# calculate average body weight ----
body_weight_nm <- no.motion_data %>% 
  group_by(Participant) %>% 
  summarise(BodyWeight_nm = mean(`Body weight (KG)`))

body_weight_trials <- trials_data %>% 
  group_by(Participant) %>% 
  summarise(BodyWeight = mean(`Body weight (KG)`))

body_weight <- cbind(body_weight_trials, body_weight_nm) %>%
  select(1:2,4) 

body_weight <- body_weight %>% 
  group_by(Participant)

body_weight$avgBodyWeight = (body_weight$BodyWeight_nm + body_weight$BodyWeight)/2

for (participant in unique(posture_data$Participant))
  posture_data$`Body weight (KG)`[posture_data$Participant == participant] = body_weight$avgBodyWeight[body_weight$Participant == participant]


# load vection data
vection_raw.data = read_csv("./data/analysis_data/extracted_vection_data/Sheet1.csv")
# recode variables to match posture data
vection_raw.data <- vection_raw.data %>% 
  rename(Participant = `Participant ID`,
         Trial = `Trial Number`,
         Speed_rounded = `Max Velocity (m/s)`,
         Rating = `Vection Intensity Rating (0-10)`) %>% 
  mutate(Participant = factor(Participant),
         Trial= factor(Trial),
         Speed_rounded = factor(Speed_rounded))
  
  
  
```


# Data visualization and cleaning

The density plots are a variation of histograms which smooth out the distribution using kernel smoothing.
The peaks show where the values are most concentrated. The y-axis is the probability density function for the kernel density estimation. 
(not the probability, to get this you would need the area under the curve). For simplicity the y-axis can be used as a value for relative comparisons.

## Descriptive Statistics
### Average AP 
```{r ds ap mean}
# vel_AP_mean
## descriptive stats
summary(posture_data$AP_mean)

ap.mean_plot <- ggplot(posture_data,
                       aes(x = Speed_rounded,
                       y = AP_mean, 
                       group = Speed_rounded)) +
  geom_boxplot() + 
  geom_jitter(aes(color = Participant),
                 alpha = 0.1) +
  ggtitle("Average AP") +
  guides(colour = guide_legend(override.aes = list(alpha = 1)))

ap.mean_plot


## smoothed version of a histogram
ggplot(posture_data, aes(x = AP_mean,
                         fill = factor(Speed_rounded), 
                         colour = factor(Speed_rounded))) +
  geom_density(alpha = 0.1) +
  ggtitle("Density plot of AP_mean") 

## visualizing normality
#qqnorm(posture_data$AP_mean)
```
\newpage
### SD AP 
```{r ds ap sd}
## descriptive stats
summary(posture_data$AP_SD)

ap.sd_plot <- ggplot(posture_data,
                       aes(x = Speed_rounded,
                       y = AP_SD, 
                       group = Speed_rounded)) +
  geom_boxplot() + 
  geom_jitter(aes(color = Participant),
                 alpha = 0.1) +
  ggtitle("AP SD") +
  guides(colour = guide_legend(override.aes = list(alpha = 1)))

ap.sd_plot


## smoothed version of a histogram
ggplot(posture_data, aes(x = AP_SD,
                         fill = factor(Speed_rounded), 
                         colour = factor(Speed_rounded))) +
  geom_density(alpha = 0.1) +
  ggtitle("Density plot of AP_SD") 

## visualizing normality
#qqnorm(posture_data$AP_SD)
```
\newpage
### Min AP 
```{r ds ap min}
## descriptive stats
summary(posture_data$AP_min)

ap.min_plot <- ggplot(posture_data,
                       aes(x = Speed_rounded,
                       y = AP_min, 
                       group = Speed_rounded)) +
  geom_boxplot() + 
  geom_jitter(aes(color = Participant),
                 alpha = 0.1) +
  ggtitle("Min AP") +
  guides(colour = guide_legend(override.aes = list(alpha = 1)))

ap.min_plot


## smoothed version of a histogram
ggplot(posture_data, aes(x = AP_min,
                         fill = factor(Speed_rounded), 
                         colour = factor(Speed_rounded))) +
  geom_density(alpha = 0.1) +
  ggtitle("Density plot of AP_min") 

## visualizing normality
#qqnorm(posture_data$AP_min)
```
\newpage
### Max AP 
```{r ds ap max}
## descriptive stats
summary(posture_data$AP_max)

ap.max_plot <- ggplot(posture_data,
                       aes(x = Speed_rounded,
                       y = AP_max, 
                       group = Speed_rounded)) +
  geom_boxplot() + 
  geom_jitter(aes(color = Participant),
                 alpha = 0.1) +
  ggtitle("Max AP") +
  guides(colour = guide_legend(override.aes = list(alpha = 1)))

ap.max_plot


## smoothed version of a histogram
ggplot(posture_data, aes(x = AP_max,
                         fill = factor(Speed_rounded), 
                         colour = factor(Speed_rounded))) +
  geom_density(alpha = 0.1) +
  ggtitle("Density plot of AP_max") 

## visualizing normality
#qqnorm(posture_data$AP_max)
```
\newpage
### Average ML 
```{r ds ml mean}
## descriptive stats
summary(posture_data$ML_mean)

ml.mean_plot <- ggplot(posture_data,
                       aes(x = Speed_rounded,
                       y = ML_mean, 
                       group = Speed_rounded)) +
  geom_boxplot() + 
  geom_jitter(aes(color = Participant),
                 alpha = 0.1) +
  ggtitle("Average ML") +
  guides(colour = guide_legend(override.aes = list(alpha = 1)))

ml.mean_plot


## smoothed version of a histogram
ggplot(posture_data, aes(x = ML_mean,
                         fill = factor(Speed_rounded), 
                         colour = factor(Speed_rounded))) +
  geom_density(alpha = 0.1) +
  ggtitle("Density plot of ML_mean") 

## visualizing normality
#qqnorm(posture_data$ML_mean)
```
\newpage
### SD ML 
```{r ds ml sd}
## descriptive stats
summary(posture_data$ML_SD)

ml.sd_plot <- ggplot(posture_data,
                       aes(x = Speed_rounded,
                       y = ML_SD, 
                       group = Speed_rounded)) +
  geom_boxplot() + 
  geom_jitter(aes(color = Participant),
                 alpha = 0.1) +
  ggtitle("ML SD") +
  guides(colour = guide_legend(override.aes = list(alpha = 1)))

ml.sd_plot


## smoothed version of a histogram
ggplot(posture_data, aes(x = ML_SD,
                         fill = factor(Speed_rounded), 
                         colour = factor(Speed_rounded))) +
  geom_density(alpha = 0.1) +
  ggtitle("Density plot of ML_SD") 

## visualizing normality
#qqnorm(posture_data$ML_SD)
```
\newpage
### Min ML 
```{r ds ml min}
## descriptive stats
summary(posture_data$ML_min)

ml.min_plot <- ggplot(posture_data,
                       aes(x = Speed_rounded,
                       y = ML_min, 
                       group = Speed_rounded)) +
  geom_boxplot() + 
  geom_jitter(aes(color = Participant),
                 alpha = 0.1) +
  ggtitle("Min ML") +
  guides(colour = guide_legend(override.aes = list(alpha = 1)))

ml.min_plot


## smoothed version of a histogram
ggplot(posture_data, aes(x = ML_min,
                         fill = factor(Speed_rounded), 
                         colour = factor(Speed_rounded))) +
  geom_density(alpha = 0.1) +
  ggtitle("Density plot of ML_min") 

## visualizing normality
#qqnorm(posture_data$ML_min)
```
\newpage
### Max ML 
```{r ds ml max}
## descriptive stats
summary(posture_data$ML_max)

ml.max_plot <- ggplot(posture_data,
                       aes(x = Speed_rounded,
                       y = ML_max, 
                       group = Speed_rounded)) +
  geom_boxplot() + 
  geom_jitter(aes(color = Participant),
                 alpha = 0.1) +
  ggtitle("Max ML") +
  guides(colour = guide_legend(override.aes = list(alpha = 1)))

ml.max_plot


## smoothed version of a histogram
ggplot(posture_data, aes(x = ML_max,
                         fill = factor(Speed_rounded), 
                         colour = factor(Speed_rounded))) +
  geom_density(alpha = 0.1) +
  ggtitle("Density plot of ML_max") 

## visualizing normality
#qqnorm(posture_data$ML_max)
```
\newpage

### Average AP velocity
```{r ds vel AP mean}
# vel_AP -----
# vel_AP_mean
## descriptive stats
summary(posture_data$vel_AP_mean)

v.ap.mean_plot <- ggplot(posture_data,
                       aes(x = Speed_rounded,
                       y = vel_AP_mean, 
                       group = Speed_rounded)) +
  geom_boxplot() + 
  geom_jitter(aes(color = Participant),
                 alpha = 0.1) +
  ggtitle("Average AP velocity") +
  guides(colour = guide_legend(override.aes = list(alpha = 1)))

v.ap.mean_plot


## smoothed version of a histogram
ggplot(posture_data, aes(x = vel_AP_mean,
                         fill = factor(Speed_rounded), 
                         colour = factor(Speed_rounded))) +
  geom_density(alpha = 0.1) +
  ggtitle("Density plot of Vel_AP_mean") 

## visualizing normality
#qqnorm(posture_data$vel_AP_mean)
```
\newpage
### Min AP Velocity 
```{r dsvel AP min}
# vel_AP_min
## descriptive stats
summary(posture_data$vel_AP_min)

v.ap.min_plot <- ggplot(posture_data,
                       aes(x = Speed_rounded,
                       y = vel_AP_min, 
                       group = Speed_rounded)) +
  geom_boxplot() + 
  geom_jitter(aes(color = Participant),
                 alpha = 0.1) +
  ggtitle("Min AP velocity") +
  guides(colour = guide_legend(override.aes = list(alpha = 1)))

v.ap.min_plot


## smoothed version of a histogram
ggplot(posture_data, aes(x = vel_AP_min,
                         fill = factor(Speed_rounded), 
                         colour = factor(Speed_rounded))) +
  geom_density(alpha = 0.1) +
  ggtitle("Density plot of Vel_AP_min") 

## visualizing normality
#qqnorm(posture_data$vel_AP_min)
```
\newpage
### Max AP Velocity 
```{r ds vel ap max}
# vel_AP_max
## descriptive stats
summary(posture_data$vel_AP_max)

v.ap.max_plot <- ggplot(posture_data,
                       aes(x = Speed_rounded,
                       y = vel_AP_max, 
                       group = Speed_rounded)) +
  geom_boxplot() + 
  geom_jitter(aes(color = Participant),
                 alpha = 0.1) +
  ggtitle("Max AP velocity") +
  guides(colour = guide_legend(override.aes = list(alpha = 1)))

v.ap.max_plot


## smoothed version of a histogram
ggplot(posture_data, aes(x = vel_AP_max,
                         fill = factor(Speed_rounded), 
                         colour = factor(Speed_rounded))) +
  geom_density(alpha = 0.1) +
  ggtitle("Density plot of Vel_AP_max")

## visualizing normality
#qqnorm(posture_data$vel_AP_max)

```
\newpage
### RMS AP Velocity 
```{r ds vel ap rms}
# vel_AP_RMS
## descriptive stats
summary(posture_data$vel_AP_RMS)

v.ap.rms_plot <- ggplot(posture_data,
                       aes(x = Speed_rounded,
                       y = vel_AP_RMS, 
                       group = Speed_rounded)) +
  geom_boxplot() + 
  geom_jitter(aes(color = Participant),
                 alpha = 0.1) +
  ggtitle("RMS AP velocity") +
  guides(colour = guide_legend(override.aes = list(alpha = 1)))
 
v.ap.rms_plot


## smoothed version of a histogram
ggplot(posture_data, aes(x = vel_AP_RMS,
                         fill = factor(Speed_rounded), 
                         colour = factor(Speed_rounded))) +
  geom_density(alpha = 0.1) +
  ggtitle("Density plot of Vel_AP_rms") 

## visualizing normality
#qqnorm(posture_data$vel_AP_RMS)
```
\newpage
### AP plots
```{r ds ap plot}
ap_plots <- v.ap.mean_plot + v.ap.min_plot + v.ap.max_plot + v.ap.rms_plot
ap_plots
```


\newpage
### Average ML Velocity 
```{r ds vel ml mean}
# vel_ML_mean
## descriptive stats
summary(posture_data$vel_ML_mean)

v.ml.mean_plot <- ggplot(posture_data,
                       aes(x = Speed_rounded,
                       y = vel_ML_mean, 
                       group = Speed_rounded)) +
  geom_boxplot() + 
  geom_jitter(aes(color = Participant),
                 alpha = 0.1) +
  ggtitle("Mean ML velocity") +
  guides(colour = guide_legend(override.aes = list(alpha = 1)))

v.ml.mean_plot


## smoothed version of a histogram
ggplot(posture_data, aes(x = vel_ML_mean,
                         fill = factor(Speed_rounded), 
                         colour = factor(Speed_rounded))) +
  geom_density(alpha = 0.1) +
  ggtitle("Density plot of Vel_ML_mean") 

## visualizing normality
#qqnorm(posture_data$vel_ML_mean)

```
\newpage
### Min ML Velocity 
```{r ds vel ml min}
# vel_ML_min
## descriptive stats
summary(posture_data$vel_ML_min)

v.ml.min_plot <- ggplot(posture_data,
                       aes(x = Speed_rounded,
                       y = vel_ML_min, 
                       group = Speed_rounded)) +
  geom_boxplot() + 
  geom_jitter(aes(color = Participant),
                 alpha = 0.1) +
  ggtitle("Min ML velocity") +
  guides(colour = guide_legend(override.aes = list(alpha = 1)))

v.ml.min_plot


## smoothed version of a histogram
ggplot(posture_data, aes(x = vel_ML_min,
                         fill = factor(Speed_rounded), 
                         colour = factor(Speed_rounded))) +
  geom_density(alpha = 0.1) +
  ggtitle("Density plot of Vel_ML_min") 

## visualizing normality
#qqnorm(posture_data$vel_ML_min)
```
\newpage
### Max ML Velocity 
```{r ds vel ml max}
# vel_ML_max
## descriptive stats
summary(posture_data$vel_ML_max)

v.ml.max_plot <- ggplot(posture_data,
                       aes(x = Speed_rounded,
                       y = vel_ML_max, 
                       group = Speed_rounded)) +
  geom_boxplot() + 
  geom_jitter(aes(color = Participant),
                 alpha = 0.1) +
  ggtitle("Max ML velocity") +
  guides(colour = guide_legend(override.aes = list(alpha = 1)))

v.ml.max_plot


## smoothed version of a histogram
ggplot(posture_data, aes(x = vel_ML_max,
                         fill = factor(Speed_rounded), 
                         colour = factor(Speed_rounded))) +
  geom_density(alpha = 0.1) +
  ggtitle("Density plot of Vel_ML_max") 

## visualizing normality
#qqnorm(posture_data$vel_ML_max)
```
\newpage
### RMS ML Velocity 
```{r ds vel ml rms}
# vel_ML_RMS
## descriptive stats
summary(posture_data$vel_ML_RMS)

v.ml.rms_plot <- ggplot(posture_data,
                       aes(x = Speed_rounded,
                       y = vel_ML_RMS, 
                       group = Speed_rounded)) +
  geom_boxplot() + 
  geom_jitter(aes(color = Participant),
                 alpha = 0.1) +
  ggtitle("RMS ML velocity") +
  guides(colour = guide_legend(override.aes = list(alpha = 1)))

v.ml.rms_plot


## smoothed version of a histogram
ggplot(posture_data, aes(x = vel_ML_RMS,
                         fill = factor(Speed_rounded), 
                         colour = factor(Speed_rounded))) +
  geom_density(alpha = 0.1) +
  ggtitle("Density plot of Vel_ML_rms") 

## visualizing normality
#qqnorm(posture_data$vel_ML_RMS)
```
\newpage 
### ML Plots
```{r ds ml plots}
ml_plots <- v.ml.mean_plot + v.ml.min_plot + v.ml.max_plot + v.ml.rms_plot
ml_plots
```

\newpage 
## Other interesting plots
```{r extra exploratory plots}
mean_plots <-ap.mean_plot + v.ap.mean_plot + ml.mean_plot + v.ml.mean_plot
mean_plots


```



# MLM Analysis vel_AP_mean

```{r MLM analysis vel_AP_mean}

posture_data <- posture_data %>% 
  mutate(Speed_rounded = factor(Speed_rounded))


# checking data for plausibility and normality
summary(posture_data$vel_AP_mean) # min = 0.7585, max = 1.3261
qqnorm(posture_data$vel_AP_mean) 

summary(mean_tilt) # min = 1.222 , max = 4.639 
qqnorm(rodDisc_data$tilt)


# main model
v.ap.mean.m1 <- posture_data %>% 
  lmer(vel_AP_mean ~ (1|Participant) + Speed_rounded,
       na.action = "na.exclude", data = .)

v.ap.mean.m1 %>% 
  summary()

# alternative models
v.ap.mean.m2 <- posture_data %>% 
  lmer(vel_AP_mean ~ (1|Participant) + Speed_rounded + tilt_mean,
       na.action = "na.exclude", data = .)

v.ap.mean.m2 %>% 
  summary()


# Model comparison
anova(v.ap.mean.m1, v.ap.mean.m2) # the models are not significantly different


# check assumptions
### Assumption1 - Linearity 
plot.v.ap.mean.linearity<-plot(resid(v.ap.mean.m1), posture_data$vel_AP_mean) # looks good

### Assumption2 - Hov (at the participant level) - homoscedasticity
assumptions_data <- posture_data

assumptions_data$model.res<- residuals(v.ap.mean.m1) #extracts the residuals and places them in a new column in our original data table
assumptions_data$abs.model.res <-abs(assumptions_data$model.res) #creates a new column with the absolute value of the residuals
assumptions_data$model.res.2 <- assumptions_data$abs.model.res^2 #squares the absolute values of the residuals to provide the more robust estimate

Levene.model <- lm(model.res.2 ~ Participant, data=assumptions_data) #ANOVA of the squared residuals
anova(Levene.model) # fails 

plot(v.ap.mean.m1) # HoV looks good


### Assumption3 - The residuals seem reasonably distributed
qqmath(v.ap.mean.m1, id=0.05)


# effect size
semipartial_R2(v.ap.mean.m1) # effect size of speed = <.00001

# ICC
v.ap.mean.m0 = posture_data %>%
  lmer(vel_AP_mean ~ (1|Participant) + 1,
       na.action = "na.exclude", data=.)

summary(v.ap.mean.m0)

v.ap.mean.m0 %>% 
  calculate_icc_lmer # ICC = 0.99 ; N = 2121; alpha = 0.05 ; P-Value is < .00001. The result is significant at p < .05.

# emmeans
emm.v.ap.mean = emmeans(v.ap.mean.m1, specs = pairwise ~ Speed_rounded)

# plot eemeans
v.ap.mean.plot_data <- emm.v.ap.mean$emmeans %>% 
  as.data.frame() %>% 
  mutate(speed = factor(Speed_rounded),
         v.ap.mean = as.double(emmean),
         se = as.double(SE))

colourCount = length(unique(v.ap.mean.plot_data$speed))
getPalette = colorRampPalette(brewer.pal(9, "Blues"))

v.ap.mean.plot <- ggplot(v.ap.mean.plot_data, 
                               aes(x = Speed_rounded, 
                                   y = v.ap.mean, 
                                   fill = Speed_rounded))+ 
  geom_bar(stat = "identity",
           width = 0.7,
           position = position_dodge(width=0.8),
            fill=getPalette(colourCount)) +
  geom_errorbar(aes(ymin = v.ap.mean-se,
                    ymax = v.ap.mean+se),
                width = .2,
                position = position_dodge(0.8),
                size = 0.5) +
  ylab("Average AP Velocity (m/s) \n ") +
  xlab("\n Speed Rounded") +
  theme_minimal() +
  theme(legend.position = "none") 

v.ap.mean.plot

```

# MLM Analysis vel_ML_mean

```{r MLM analysis vel_ML_mean}

# checking data for plausibility and normality
summary(posture_data$vel_ML_mean) # min = 0.8281 , max =  1.4545 
qqnorm(posture_data$vel_ML_mean) # DV seems to depart from normality

# main model
v.ml.mean.m1 <- posture_data %>% 
  lmer(vel_ML_mean ~ (1|Participant) + Speed_rounded,
       na.action = "na.exclude", data = .)

v.ml.mean.m1 %>% 
  summary()

# alternative models
v.ml.mean.m2 <- posture_data %>% 
  lmer(vel_ML_mean ~ (1|Participant) + Speed_rounded + tilt_mean,
       na.action = "na.exclude", data = .)

v.ml.mean.m2 %>% 
  summary()

# Model comparison
anova(v.ml.mean.m1, v.ml.mean.m2) # not significantly different


# check assumptions
### Assumption1 - Linearity 
plot.v.ml.mean.linearity<-plot(resid(v.ml.mean.m1), posture_data$vel_ML_mean) # looks good

### Assumption2 - Hov (at the participant level) - homoscedasticity
assumptions_data <- posture_data

assumptions_data$model.res<- residuals(v.ml.mean.m1) #extracts the residuals and places them in a new column in our original data table
assumptions_data$abs.model.res <-abs(assumptions_data$model.res) #creates a new column with the absolute value of the residuals
assumptions_data$model.res.2 <- assumptions_data$abs.model.res^2 #squares the absolute values of the residuals to provide the more robust estimate

Levene.model <- lm(model.res.2 ~ Participant, data=assumptions_data) #ANOVA of the squared residuals
anova(Levene.model) # fails 

plot(v.ml.mean.m1) # HoV seems reasonable


### Assumption3 - The residuals seem reasonably distributed
qqmath(v.ml.mean.m1, id=0.05)


# effect size
semipartial_R2(v.ml.mean.m1) # effect size of speed = 0.001

# ICC
v.ml.mean.m0 = posture_data %>%
  lmer(vel_ML_mean ~ (1|Participant) + 1,
       na.action = "na.exclude", data=.)

summary(v.ml.mean.m0)

v.ml.mean.m0 %>% 
  calculate_icc_lmer # ICC = 0.99 ; N = 2121; alpha = 0.05 ; P-Value is < .00001. The result is significant at p < .05.

# emmeans
emm.v.ml.mean = emmeans(v.ml.mean.m1, specs = pairwise ~ Speed_rounded)

# plot eemeans
v.ml.mean.plot_data <- emm.v.ml.mean$emmeans %>% 
  as.data.frame() %>% 
  mutate(speed = factor(Speed_rounded),
         v.ml.mean = as.double(emmean),
         se = as.double(SE))

colourCount = length(unique(v.ml.mean.plot_data$speed))
getPalette = colorRampPalette(brewer.pal(9, "Greens"))

v.ml.mean.plot <- ggplot(v.ml.mean.plot_data, 
                               aes(x = Speed_rounded, 
                                   y = v.ml.mean, 
                                   fill = Speed_rounded))+ 
  geom_bar(stat = "identity",
           width = 0.7,
           position = position_dodge(width=0.8),
            fill=getPalette(colourCount)) +
  geom_errorbar(aes(ymin = v.ml.mean-se,
                    ymax = v.ml.mean+se),
                width = .2,
                position = position_dodge(0.8),
                size = 0.5) +
  ylab("Average ML Velocity (m/s) \n ") +
  xlab("\n Speed Rounded") +
  theme_minimal() +
  theme(legend.position = "none") 

v.ml.mean.plot

```



